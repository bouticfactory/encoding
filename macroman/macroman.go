package macroman

import (
	"io"
 	"unicode/utf8"
)

/*
 * mapping from utf-8 to MacRoman
 */
var utf8tomacroman map[rune]byte = map[rune]byte {
	0x0020: 0x20, // SPACE
	0x0021: 0x21, // EXCLAMATION MARK
	0x0022: 0x22, // QUOTATION MARK
	0x0023: 0x23, // NUMBER SIGN
	0x0024: 0x24, // DOLLAR SIGN
	0x0025: 0x25, // PERCENT SIGN
	0x0026: 0x26, // AMPERSAND
	0x0027: 0x27, // APOSTROPHE
	0x0028: 0x28, // LEFT PARENTHESIS
	0x0029: 0x29, // RIGHT PARENTHESIS
	0x002A: 0x2A, // ASTERISK
	0x002B: 0x2B, // PLUS SIGN
	0x002C: 0x2C, // COMMA
	0x002D: 0x2D, // HYPHEN-MINUS
	0x002E: 0x2E, // FULL STOP
	0x002F: 0x2F, // SOLIDUS
	0x0030: 0x30, // DIGIT ZERO
	0x0031: 0x31, // DIGIT ONE
	0x0032: 0x32, // DIGIT TWO
	0x0033: 0x33, // DIGIT THREE
	0x0034: 0x34, // DIGIT FOUR
	0x0035: 0x35, // DIGIT FIVE
	0x0036: 0x36, // DIGIT SIX
	0x0037: 0x37, // DIGIT SEVEN
	0x0038: 0x38, // DIGIT EIGHT
	0x0039: 0x39, // DIGIT NINE
	0x003A: 0x3A, // COLON
	0x003B: 0x3B, // SEMICOLON
	0x003C: 0x3C, // LESS-THAN SIGN
	0x003D: 0x3D, // EQUALS SIGN
	0x003E: 0x3E, // GREATER-THAN SIGN
	0x003F: 0x3F, // QUESTION MARK
	0x0040: 0x40, // COMMERCIAL AT
	0x0041: 0x41, // LATIN CAPITAL LETTER A
	0x0042: 0x42, // LATIN CAPITAL LETTER B
	0x0043: 0x43, // LATIN CAPITAL LETTER C
	0x0044: 0x44, // LATIN CAPITAL LETTER D
	0x0045: 0x45, // LATIN CAPITAL LETTER E
	0x0046: 0x46, // LATIN CAPITAL LETTER F
	0x0047: 0x47, // LATIN CAPITAL LETTER G
	0x0048: 0x48, // LATIN CAPITAL LETTER H
	0x0049: 0x49, // LATIN CAPITAL LETTER I
	0x004A: 0x4A, // LATIN CAPITAL LETTER J
	0x004B: 0x4B, // LATIN CAPITAL LETTER K
	0x004C: 0x4C, // LATIN CAPITAL LETTER L
	0x004D: 0x4D, // LATIN CAPITAL LETTER M
	0x004E: 0x4E, // LATIN CAPITAL LETTER N
	0x004F: 0x4F, // LATIN CAPITAL LETTER O
	0x0050: 0x50, // LATIN CAPITAL LETTER P
	0x0051: 0x51, // LATIN CAPITAL LETTER Q
	0x0052: 0x52, // LATIN CAPITAL LETTER R
	0x0053: 0x53, // LATIN CAPITAL LETTER S
	0x0054: 0x54, // LATIN CAPITAL LETTER T
	0x0055: 0x55, // LATIN CAPITAL LETTER U
	0x0056: 0x56, // LATIN CAPITAL LETTER V
	0x0057: 0x57, // LATIN CAPITAL LETTER W
	0x0058: 0x58, // LATIN CAPITAL LETTER X
	0x0059: 0x59, // LATIN CAPITAL LETTER Y
	0x005A: 0x5A, // LATIN CAPITAL LETTER Z
	0x005B: 0x5B, // LEFT SQUARE BRACKET
	0x005C: 0x5C, // REVERSE SOLIDUS
	0x005D: 0x5D, // RIGHT SQUARE BRACKET
	0x005E: 0x5E, // CIRCUMFLEX ACCENT
	0x005F: 0x5F, // LOW LINE
	0x0060: 0x60, // GRAVE ACCENT
	0x0061: 0x61, // LATIN SMALL LETTER A
	0x0062: 0x62, // LATIN SMALL LETTER B
	0x0063: 0x63, // LATIN SMALL LETTER C
	0x0064: 0x64, // LATIN SMALL LETTER D
	0x0065: 0x65, // LATIN SMALL LETTER E
	0x0066: 0x66, // LATIN SMALL LETTER F
	0x0067: 0x67, // LATIN SMALL LETTER G
	0x0068: 0x68, // LATIN SMALL LETTER H
	0x0069: 0x69, // LATIN SMALL LETTER I
	0x006A: 0x6A, // LATIN SMALL LETTER J
	0x006B: 0x6B, // LATIN SMALL LETTER K
	0x006C: 0x6C, // LATIN SMALL LETTER L
	0x006D: 0x6D, // LATIN SMALL LETTER M
	0x006E: 0x6E, // LATIN SMALL LETTER N
	0x006F: 0x6F, // LATIN SMALL LETTER O
	0x0070: 0x70, // LATIN SMALL LETTER P
	0x0071: 0x71, // LATIN SMALL LETTER Q
	0x0072: 0x72, // LATIN SMALL LETTER R
	0x0073: 0x73, // LATIN SMALL LETTER S
	0x0074: 0x74, // LATIN SMALL LETTER T
	0x0075: 0x75, // LATIN SMALL LETTER U
	0x0076: 0x76, // LATIN SMALL LETTER V
	0x0077: 0x77, // LATIN SMALL LETTER W
	0x0078: 0x78, // LATIN SMALL LETTER X
	0x0079: 0x79, // LATIN SMALL LETTER Y
	0x007A: 0x7A, // LATIN SMALL LETTER Z
	0x007B: 0x7B, // LEFT CURLY BRACKET
	0x007C: 0x7C, // VERTICAL LINE
	0x007D: 0x7D, // RIGHT CURLY BRACKET
	0x007E: 0x7E, // TILDE

	0x00C4: 0x80, // LATIN CAPITAL LETTER A WITH DIAERESIS
	0x00C5: 0x81, // LATIN CAPITAL LETTER A WITH RING ABOVE
	0x00C7: 0x82, // LATIN CAPITAL LETTER C WITH CEDILLA
	0x00C9: 0x83, // LATIN CAPITAL LETTER E WITH ACUTE
	0x00D1: 0x84, // LATIN CAPITAL LETTER N WITH TILDE
	0x00D6: 0x85, // LATIN CAPITAL LETTER O WITH DIAERESIS
	0x00DC: 0x86, // LATIN CAPITAL LETTER U WITH DIAERESIS
	0x00E1: 0x87, // LATIN SMALL LETTER A WITH ACUTE
	0x00E0: 0x88, // LATIN SMALL LETTER A WITH GRAVE
	0x00E2: 0x89, // LATIN SMALL LETTER A WITH CIRCUMFLEX
	0x00E4: 0x8A, // LATIN SMALL LETTER A WITH DIAERESIS
	0x00E3: 0x8B, // LATIN SMALL LETTER A WITH TILDE
	0x00E5: 0x8C, // LATIN SMALL LETTER A WITH RING ABOVE
	0x00E7: 0x8D, // LATIN SMALL LETTER C WITH CEDILLA
	0x00E9: 0x8E, // LATIN SMALL LETTER E WITH ACUTE
	0x00E8: 0x8F, // LATIN SMALL LETTER E WITH GRAVE
	0x00EA: 0x90, // LATIN SMALL LETTER E WITH CIRCUMFLEX
	0x00EB: 0x91, // LATIN SMALL LETTER E WITH DIAERESIS
	0x00ED: 0x92, // LATIN SMALL LETTER I WITH ACUTE
	0x00EC: 0x93, // LATIN SMALL LETTER I WITH GRAVE
	0x00EE: 0x94, // LATIN SMALL LETTER I WITH CIRCUMFLEX
	0x00EF: 0x95, // LATIN SMALL LETTER I WITH DIAERESIS
	0x00F1: 0x96, // LATIN SMALL LETTER N WITH TILDE
	0x00F3: 0x97, // LATIN SMALL LETTER O WITH ACUTE
	0x00F2: 0x98, // LATIN SMALL LETTER O WITH GRAVE
	0x00F4: 0x99, // LATIN SMALL LETTER O WITH CIRCUMFLEX
	0x00F6: 0x9A, // LATIN SMALL LETTER O WITH DIAERESIS
	0x00F5: 0x9B, // LATIN SMALL LETTER O WITH TILDE
	0x00FA: 0x9C, // LATIN SMALL LETTER U WITH ACUTE
	0x00F9: 0x9D, // LATIN SMALL LETTER U WITH GRAVE
	0x00FB: 0x9E, // LATIN SMALL LETTER U WITH CIRCUMFLEX
	0x00FC: 0x9F, // LATIN SMALL LETTER U WITH DIAERESIS
	0x2020: 0xA0, // DAGGER
	0x00B0: 0xA1, // DEGREE SIGN
	0x00A2: 0xA2, // CENT SIGN
	0x00A3: 0xA3, // POUND SIGN
	0x00A7: 0xA4, // SECTION SIGN
	0x2022: 0xA5, // BULLET
	0x00B6: 0xA6, // PILCROW SIGN
	0x00DF: 0xA7, // LATIN SMALL LETTER SHARP S
	0x00AE: 0xA8, // REGISTERED SIGN
	0x00A9: 0xA9, // COPYRIGHT SIGN
	0x2122: 0xAA, // TRADE MARK SIGN
	0x00B4: 0xAB, // ACUTE ACCENT
	0x00A8: 0xAC, // DIAERESIS
	0x2260: 0xAD, // NOT EQUAL TO
	0x00C6: 0xAE, // LATIN CAPITAL LETTER AE
	0x00D8: 0xAF, // LATIN CAPITAL LETTER O WITH STROKE
	0x221E: 0xB0, // INFINITY
	0x00B1: 0xB1, // PLUS-MINUS SIGN
	0x2264: 0xB2, // LESS-THAN OR EQUAL TO
	0x2265: 0xB3, // GREATER-THAN OR EQUAL TO
	0x00A5: 0xB4, // YEN SIGN
	0x00B5: 0xB5, // MICRO SIGN
	0x2202: 0xB6, // PARTIAL DIFFERENTIAL
	0x2211: 0xB7, // N-ARY SUMMATION
	0x220F: 0xB8, // N-ARY PRODUCT
	0x03C0: 0xB9, // GREEK SMALL LETTER PI
	0x222B: 0xBA, // INTEGRAL
	0x00AA: 0xBB, // FEMININE ORDINAL INDICATOR
	0x00BA: 0xBC, // MASCULINE ORDINAL INDICATOR
	0x03A9: 0xBD, // GREEK CAPITAL LETTER OMEGA
	0x00E6: 0xBE, // LATIN SMALL LETTER AE
	0x00F8: 0xBF, // LATIN SMALL LETTER O WITH STROKE
	0x00BF: 0xC0, // INVERTED QUESTION MARK
	0x00A1: 0xC1, // INVERTED EXCLAMATION MARK
	0x00AC: 0xC2, // NOT SIGN
	0x221A: 0xC3, // SQUARE ROOT
	0x0192: 0xC4, // LATIN SMALL LETTER F WITH HOOK
	0x2248: 0xC5, // ALMOST EQUAL TO
	0x2206: 0xC6, // INCREMENT
	0x00AB: 0xC7, // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
	0x00BB: 0xC8, // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
	0x2026: 0xC9, // HORIZONTAL ELLIPSIS
	0x00A0: 0xCA, // NO-BREAK SPACE
	0x00C0: 0xCB, // LATIN CAPITAL LETTER A WITH GRAVE
	0x00C3: 0xCC, // LATIN CAPITAL LETTER A WITH TILDE
	0x00D5: 0xCD, // LATIN CAPITAL LETTER O WITH TILDE
	0x0152: 0xCE, // LATIN CAPITAL LIGATURE OE
	0x0153: 0xCF, // LATIN SMALL LIGATURE OE
	0x2013: 0xD0, // EN DASH
	0x2014: 0xD1, // EM DASH
	0x201C: 0xD2, // LEFT DOUBLE QUOTATION MARK
	0x201D: 0xD3, // RIGHT DOUBLE QUOTATION MARK
	0x2018: 0xD4, // LEFT SINGLE QUOTATION MARK
	0x2019: 0xD5, // RIGHT SINGLE QUOTATION MARK
	0x00F7: 0xD6, // DIVISION SIGN
	0x25CA: 0xD7, // LOZENGE
	0x00FF: 0xD8, // LATIN SMALL LETTER Y WITH DIAERESIS
	0x0178: 0xD9, // LATIN CAPITAL LETTER Y WITH DIAERESIS
	0x2044: 0xDA, // FRACTION SLASH
	0x20AC: 0xDB, // EURO SIGN
	0x2039: 0xDC, // SINGLE LEFT-POINTING ANGLE QUOTATION MARK
	0x203A: 0xDD, // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
	0xFB01: 0xDE, // LATIN SMALL LIGATURE FI
	0xFB02: 0xDF, // LATIN SMALL LIGATURE FL
	0x2021: 0xE0, // DOUBLE DAGGER
	0x00B7: 0xE1, // MIDDLE DOT
	0x201A: 0xE2, // SINGLE LOW-9 QUOTATION MARK
	0x201E: 0xE3, // DOUBLE LOW-9 QUOTATION MARK
	0x2030: 0xE4, // PER MILLE SIGN
	0x00C2: 0xE5, // LATIN CAPITAL LETTER A WITH CIRCUMFLEX
	0x00CA: 0xE6, // LATIN CAPITAL LETTER E WITH CIRCUMFLEX
	0x00C1: 0xE7, // LATIN CAPITAL LETTER A WITH ACUTE
	0x00CB: 0xE8, // LATIN CAPITAL LETTER E WITH DIAERESIS
	0x00C8: 0xE9, // LATIN CAPITAL LETTER E WITH GRAVE
	0x00CD: 0xEA, // LATIN CAPITAL LETTER I WITH ACUTE
	0x00CE: 0xEB, // LATIN CAPITAL LETTER I WITH CIRCUMFLEX
	0x00CF: 0xEC, // LATIN CAPITAL LETTER I WITH DIAERESIS
	0x00CC: 0xED, // LATIN CAPITAL LETTER I WITH GRAVE
	0x00D3: 0xEE, // LATIN CAPITAL LETTER O WITH ACUTE
	0x00D4: 0xEF, // LATIN CAPITAL LETTER O WITH CIRCUMFLEX
	0xF8FF: 0xF0, // Apple logo
	0x00D2: 0xF1, // LATIN CAPITAL LETTER O WITH GRAVE
	0x00DA: 0xF2, // LATIN CAPITAL LETTER U WITH ACUTE
	0x00DB: 0xF3, // LATIN CAPITAL LETTER U WITH CIRCUMFLEX
	0x00D9: 0xF4, // LATIN CAPITAL LETTER U WITH GRAVE
	0x0131: 0xF5, // LATIN SMALL LETTER DOTLESS I
	0x02C6: 0xF6, // MODIFIER LETTER CIRCUMFLEX ACCENT
	0x02DC: 0xF7, // SMALL TILDE
	0x00AF: 0xF8, // MACRON
	0x02D8: 0xF9, // BREVE
	0x02D9: 0xFA, // DOT ABOVE
	0x02DA: 0xFB, // RING ABOVE
	0x00B8: 0xFC, // CEDILLA
	0x02DD: 0xFD, // DOUBLE ACUTE ACCENT
	0x02DB: 0xFE, // OGONEK
	0x02C7: 0xFF, // CARON
}

/*
 * mapping from MacRoman to utf8
 */
var macromantoutf8 map[byte]rune = map[byte]rune {
	0x20: 0x0020, // SPACE
	0x21: 0x0021, // EXCLAMATION MARK
	0x22: 0x0022, // QUOTATION MARK
	0x23: 0x0023, // NUMBER SIGN
	0x24: 0x0024, // DOLLAR SIGN
	0x25: 0x0025, // PERCENT SIGN
	0x26: 0x0026, // AMPERSAND
	0x27: 0x0027, // APOSTROPHE
	0x28: 0x0028, // LEFT PARENTHESIS
	0x29: 0x0029, // RIGHT PARENTHESIS
	0x2A: 0x002A, // ASTERISK
	0x2B: 0x002B, // PLUS SIGN
	0x2C: 0x002C, // COMMA
	0x2D: 0x002D, // HYPHEN-MINUS
	0x2E: 0x002E, // FULL STOP
	0x2F: 0x002F, // SOLIDUS
	0x30: 0x0030, // DIGIT ZERO
	0x31: 0x0031, // DIGIT ONE
	0x32: 0x0032, // DIGIT TWO
	0x33: 0x0033, // DIGIT THREE
	0x34: 0x0034, // DIGIT FOUR
	0x35: 0x0035, // DIGIT FIVE
	0x36: 0x0036, // DIGIT SIX
	0x37: 0x0037, // DIGIT SEVEN
	0x38: 0x0038, // DIGIT EIGHT
	0x39: 0x0039, // DIGIT NINE
	0x3A: 0x003A, // COLON
	0x3B: 0x003B, // SEMICOLON
	0x3C: 0x003C, // LESS-THAN SIGN
	0x3D: 0x003D, // EQUALS SIGN
	0x3E: 0x003E, // GREATER-THAN SIGN
	0x3F: 0x003F, // QUESTION MARK
	0x40: 0x0040, // COMMERCIAL AT
	0x41: 0x0041, // LATIN CAPITAL LETTER A
	0x42: 0x0042, // LATIN CAPITAL LETTER B
	0x43: 0x0043, // LATIN CAPITAL LETTER C
	0x44: 0x0044, // LATIN CAPITAL LETTER D
	0x45: 0x0045, // LATIN CAPITAL LETTER E
	0x46: 0x0046, // LATIN CAPITAL LETTER F
	0x47: 0x0047, // LATIN CAPITAL LETTER G
	0x48: 0x0048, // LATIN CAPITAL LETTER H
	0x49: 0x0049, // LATIN CAPITAL LETTER I
	0x4A: 0x004A, // LATIN CAPITAL LETTER J
	0x4B: 0x004B, // LATIN CAPITAL LETTER K
	0x4C: 0x004C, // LATIN CAPITAL LETTER L
	0x4D: 0x004D, // LATIN CAPITAL LETTER M
	0x4E: 0x004E, // LATIN CAPITAL LETTER N
	0x4F: 0x004F, // LATIN CAPITAL LETTER O
	0x50: 0x0050, // LATIN CAPITAL LETTER P
	0x51: 0x0051, // LATIN CAPITAL LETTER Q
	0x52: 0x0052, // LATIN CAPITAL LETTER R
	0x53: 0x0053, // LATIN CAPITAL LETTER S
	0x54: 0x0054, // LATIN CAPITAL LETTER T
	0x55: 0x0055, // LATIN CAPITAL LETTER U
	0x56: 0x0056, // LATIN CAPITAL LETTER V
	0x57: 0x0057, // LATIN CAPITAL LETTER W
	0x58: 0x0058, // LATIN CAPITAL LETTER X
	0x59: 0x0059, // LATIN CAPITAL LETTER Y
	0x5A: 0x005A, // LATIN CAPITAL LETTER Z
	0x5B: 0x005B, // LEFT SQUARE BRACKET
	0x5C: 0x005C, // REVERSE SOLIDUS
	0x5D: 0x005D, // RIGHT SQUARE BRACKET
	0x5E: 0x005E, // CIRCUMFLEX ACCENT
	0x5F: 0x005F, // LOW LINE
	0x60: 0x0060, // GRAVE ACCENT
	0x61: 0x0061, // LATIN SMALL LETTER A
	0x62: 0x0062, // LATIN SMALL LETTER B
	0x63: 0x0063, // LATIN SMALL LETTER C
	0x64: 0x0064, // LATIN SMALL LETTER D
	0x65: 0x0065, // LATIN SMALL LETTER E
	0x66: 0x0066, // LATIN SMALL LETTER F
	0x67: 0x0067, // LATIN SMALL LETTER G
	0x68: 0x0068, // LATIN SMALL LETTER H
	0x69: 0x0069, // LATIN SMALL LETTER I
	0x6A: 0x006A, // LATIN SMALL LETTER J
	0x6B: 0x006B, // LATIN SMALL LETTER K
	0x6C: 0x006C, // LATIN SMALL LETTER L
	0x6D: 0x006D, // LATIN SMALL LETTER M
	0x6E: 0x006E, // LATIN SMALL LETTER N
	0x6F: 0x006F, // LATIN SMALL LETTER O
	0x70: 0x0070, // LATIN SMALL LETTER P
	0x71: 0x0071, // LATIN SMALL LETTER Q
	0x72: 0x0072, // LATIN SMALL LETTER R
	0x73: 0x0073, // LATIN SMALL LETTER S
	0x74: 0x0074, // LATIN SMALL LETTER T
	0x75: 0x0075, // LATIN SMALL LETTER U
	0x76: 0x0076, // LATIN SMALL LETTER V
	0x77: 0x0077, // LATIN SMALL LETTER W
	0x78: 0x0078, // LATIN SMALL LETTER X
	0x79: 0x0079, // LATIN SMALL LETTER Y
	0x7A: 0x007A, // LATIN SMALL LETTER Z
	0x7B: 0x007B, // LEFT CURLY BRACKET
	0x7C: 0x007C, // VERTICAL LINE
	0x7D: 0x007D, // RIGHT CURLY BRACKET
	0x7E: 0x007E, // TILDE

	0x80: 0x00C4, // LATIN CAPITAL LETTER A WITH DIAERESIS
	0x81: 0x00C5, // LATIN CAPITAL LETTER A WITH RING ABOVE
	0x82: 0x00C7, // LATIN CAPITAL LETTER C WITH CEDILLA
	0x83: 0x00C9, // LATIN CAPITAL LETTER E WITH ACUTE
	0x84: 0x00D1, // LATIN CAPITAL LETTER N WITH TILDE
	0x85: 0x00D6, // LATIN CAPITAL LETTER O WITH DIAERESIS
	0x86: 0x00DC, // LATIN CAPITAL LETTER U WITH DIAERESIS
	0x87: 0x00E1, // LATIN SMALL LETTER A WITH ACUTE
	0x88: 0x00E0, // LATIN SMALL LETTER A WITH GRAVE
	0x89: 0x00E2, // LATIN SMALL LETTER A WITH CIRCUMFLEX
	0x8A: 0x00E4, // LATIN SMALL LETTER A WITH DIAERESIS
	0x8B: 0x00E3, // LATIN SMALL LETTER A WITH TILDE
	0x8C: 0x00E5, // LATIN SMALL LETTER A WITH RING ABOVE
	0x8D: 0x00E7, // LATIN SMALL LETTER C WITH CEDILLA
	0x8E: 0x00E9, // LATIN SMALL LETTER E WITH ACUTE
	0x8F: 0x00E8, // LATIN SMALL LETTER E WITH GRAVE
	0x90: 0x00EA, // LATIN SMALL LETTER E WITH CIRCUMFLEX
	0x91: 0x00EB, // LATIN SMALL LETTER E WITH DIAERESIS
	0x92: 0x00ED, // LATIN SMALL LETTER I WITH ACUTE
	0x93: 0x00EC, // LATIN SMALL LETTER I WITH GRAVE
	0x94: 0x00EE, // LATIN SMALL LETTER I WITH CIRCUMFLEX
	0x95: 0x00EF, // LATIN SMALL LETTER I WITH DIAERESIS
	0x96: 0x00F1, // LATIN SMALL LETTER N WITH TILDE
	0x97: 0x00F3, // LATIN SMALL LETTER O WITH ACUTE
	0x98: 0x00F2, // LATIN SMALL LETTER O WITH GRAVE
	0x99: 0x00F4, // LATIN SMALL LETTER O WITH CIRCUMFLEX
	0x9A: 0x00F6, // LATIN SMALL LETTER O WITH DIAERESIS
	0x9B: 0x00F5, // LATIN SMALL LETTER O WITH TILDE
	0x9C: 0x00FA, // LATIN SMALL LETTER U WITH ACUTE
	0x9D: 0x00F9, // LATIN SMALL LETTER U WITH GRAVE
	0x9E: 0x00FB, // LATIN SMALL LETTER U WITH CIRCUMFLEX
	0x9F: 0x00FC, // LATIN SMALL LETTER U WITH DIAERESIS
	0xA0: 0x2020, // DAGGER
	0xA1: 0x00B0, // DEGREE SIGN
	0xA2: 0x00A2, // CENT SIGN
	0xA3: 0x00A3, // POUND SIGN
	0xA4: 0x00A7, // SECTION SIGN
	0xA5: 0x2022, // BULLET
	0xA6: 0x00B6, // PILCROW SIGN
	0xA7: 0x00DF, // LATIN SMALL LETTER SHARP S
	0xA8: 0x00AE, // REGISTERED SIGN
	0xA9: 0x00A9, // COPYRIGHT SIGN
	0xAA: 0x2122, // TRADE MARK SIGN
	0xAB: 0x00B4, // ACUTE ACCENT
	0xAC: 0x00A8, // DIAERESIS
	0xAD: 0x2260, // NOT EQUAL TO
	0xAE: 0x00C6, // LATIN CAPITAL LETTER AE
	0xAF: 0x00D8, // LATIN CAPITAL LETTER O WITH STROKE
	0xB0: 0x221E, // INFINITY
	0xB1: 0x00B1, // PLUS-MINUS SIGN
	0xB2: 0x2264, // LESS-THAN OR EQUAL TO
	0xB3: 0x2265, // GREATER-THAN OR EQUAL TO
	0xB4: 0x00A5, // YEN SIGN
	0xB5: 0x00B5, // MICRO SIGN
	0xB6: 0x2202, // PARTIAL DIFFERENTIAL
	0xB7: 0x2211, // N-ARY SUMMATION
	0xB8: 0x220F, // N-ARY PRODUCT
	0xB9: 0x03C0, // GREEK SMALL LETTER PI
	0xBA: 0x222B, // INTEGRAL
	0xBB: 0x00AA, // FEMININE ORDINAL INDICATOR
	0xBC: 0x00BA, // MASCULINE ORDINAL INDICATOR
	0xBD: 0x03A9, // GREEK CAPITAL LETTER OMEGA
	0xBE: 0x00E6, // LATIN SMALL LETTER AE
	0xBF: 0x00F8, // LATIN SMALL LETTER O WITH STROKE
	0xC0: 0x00BF, // INVERTED QUESTION MARK
	0xC1: 0x00A1, // INVERTED EXCLAMATION MARK
	0xC2: 0x00AC, // NOT SIGN
	0xC3: 0x221A, // SQUARE ROOT
	0xC4: 0x0192, // LATIN SMALL LETTER F WITH HOOK
	0xC5: 0x2248, // ALMOST EQUAL TO
	0xC6: 0x2206, // INCREMENT
	0xC7: 0x00AB, // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
	0xC8: 0x00BB, // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
	0xC9: 0x2026, // HORIZONTAL ELLIPSIS
	0xCA: 0x00A0, // NO-BREAK SPACE
	0xCB: 0x00C0, // LATIN CAPITAL LETTER A WITH GRAVE
	0xCC: 0x00C3, // LATIN CAPITAL LETTER A WITH TILDE
	0xCD: 0x00D5, // LATIN CAPITAL LETTER O WITH TILDE
	0xCE: 0x0152, // LATIN CAPITAL LIGATURE OE
	0xCF: 0x0153, // LATIN SMALL LIGATURE OE
	0xD0: 0x2013, // EN DASH
	0xD1: 0x2014, // EM DASH
	0xD2: 0x201C, // LEFT DOUBLE QUOTATION MARK
	0xD3: 0x201D, // RIGHT DOUBLE QUOTATION MARK
	0xD4: 0x2018, // LEFT SINGLE QUOTATION MARK
	0xD5: 0x2019, // RIGHT SINGLE QUOTATION MARK
	0xD6: 0x00F7, // DIVISION SIGN
	0xD7: 0x25CA, // LOZENGE
	0xD8: 0x00FF, // LATIN SMALL LETTER Y WITH DIAERESIS
	0xD9: 0x0178, // LATIN CAPITAL LETTER Y WITH DIAERESIS
	0xDA: 0x2044, // FRACTION SLASH
	0xDB: 0x20AC, // EURO SIGN
	0xDC: 0x2039, // SINGLE LEFT-POINTING ANGLE QUOTATION MARK
	0xDD: 0x203A, // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
	0xDE: 0xFB01, // LATIN SMALL LIGATURE FI
	0xDF: 0xFB02, // LATIN SMALL LIGATURE FL
	0xE0: 0x2021, // DOUBLE DAGGER
	0xE1: 0x00B7, // MIDDLE DOT
	0xE2: 0x201A, // SINGLE LOW-9 QUOTATION MARK
	0xE3: 0x201E, // DOUBLE LOW-9 QUOTATION MARK
	0xE4: 0x2030, // PER MILLE SIGN
	0xE5: 0x00C2, // LATIN CAPITAL LETTER A WITH CIRCUMFLEX
	0xE6: 0x00CA, // LATIN CAPITAL LETTER E WITH CIRCUMFLEX
	0xE7: 0x00C1, // LATIN CAPITAL LETTER A WITH ACUTE
	0xE8: 0x00CB, // LATIN CAPITAL LETTER E WITH DIAERESIS
	0xE9: 0x00C8, // LATIN CAPITAL LETTER E WITH GRAVE
	0xEA: 0x00CD, // LATIN CAPITAL LETTER I WITH ACUTE
	0xEB: 0x00CE, // LATIN CAPITAL LETTER I WITH CIRCUMFLEX
	0xEC: 0x00CF, // LATIN CAPITAL LETTER I WITH DIAERESIS
	0xED: 0x00CC, // LATIN CAPITAL LETTER I WITH GRAVE
	0xEE: 0x00D3, // LATIN CAPITAL LETTER O WITH ACUTE
	0xEF: 0x00D4, // LATIN CAPITAL LETTER O WITH CIRCUMFLEX
	0xF0: 0xF8FF, // Apple logo
	0xF1: 0x00D2, // LATIN CAPITAL LETTER O WITH GRAVE
	0xF2: 0x00DA, // LATIN CAPITAL LETTER U WITH ACUTE
	0xF3: 0x00DB, // LATIN CAPITAL LETTER U WITH CIRCUMFLEX
	0xF4: 0x00D9, // LATIN CAPITAL LETTER U WITH GRAVE
	0xF5: 0x0131, // LATIN SMALL LETTER DOTLESS I
	0xF6: 0x02C6, // MODIFIER LETTER CIRCUMFLEX ACCENT
	0xF7: 0x02DC, // SMALL TILDE
	0xF8: 0x00AF, // MACRON
	0xF9: 0x02D8, // BREVE
	0xFA: 0x02D9, // DOT ABOVE
	0xFB: 0x02DA, // RING ABOVE
	0xFC: 0x00B8, // CEDILLA
	0xFD: 0x02DD, // DOUBLE ACUTE ACCENT
	0xFE: 0x02DB, // OGONEK
	0xFF: 0x02C7, // CARON
}

/*
 * Encoder
 */

// encodes src into at most utf8.RunCount(src)
// bytes of dst, returning the actual number of bytes written.
// src must be utf-8 encoded
func Encode(dst, src []byte) int {
	if len(src) == 0 {
		return 0
	}
	
	l := 0
	for len(src) > 0 {
		r, size := utf8.DecodeRune(src)
		dst[l] = utf8tomacroman[r]
		l += 1
		src = src[size:]
	}
	return l
}

// returns a new macroman stream encoder.  Data written to
// the returned writer will be encoded and then written to w.
// Written streams must be utf-8 encoded
func NewEncoder(w io.Writer) io.Writer { return &encoder{w: w} }

const bufSize = 1024

type encoder struct {
	err  error
	w    io.Writer
	out  [bufSize]byte
}

func (e *encoder) Write(p []byte) (n int, err error) {
	if e.err != nil {
		return 0, e.err
	}

	chunk := 1
	n = 0
	if len(p) < bufSize {
		n = Encode(e.out[0:], p)
		if _, werr := e.w.Write(e.out[0:n]); werr != nil {
			return n, werr
		}
		return n, nil
	}

	for len(p) > 0 {
		n += Encode(e.out[0:], p[:bufSize])
		if _, werr := e.w.Write(e.out[0:n]); werr != nil {
			return n, werr
		}
		p = p[n:]
		chunk += 1
	}

	return n, nil
}

/*
 * Decoder
 */

type DestinationTooSmall int64

func (e DestinationTooSmall) Error() string {
	return "The destination is too small to contain the conversion"
}

// decodes src into dst, returning both the number
// of bytes written to dst and the number consumed from src.
// the result string in dst is utf-8 encoded
// if dst is not large enough, DestinationTooSmall is returned
// and dst contains the nsrc characters from src that were
// converted so far to ndst characters
func Decode(dst, src []byte) (ndst, nsrc int, err error) {
	if len(src) == 0 {
		return 0, 0, nil
	}
	
	nsrc, ndst = 0, 0
	for len(src) > 0 {
		r, found := macromantoutf8[src[0]]
		if found {
			if len(dst[ndst:]) < utf8.RuneLen(r) {
				return ndst, nsrc, DestinationTooSmall(nsrc)
			}
			s := utf8.EncodeRune(dst[ndst:], r)
			ndst += s
		}
		nsrc += 1
		src = src[1:]
	}
	return ndst, nsrc, nil
}

// NewDecoder constructs a new macroman stream decoder.
//
// NewDecoder wraps an io.Reader interface around Decode.
func NewDecoder(r io.Reader) io.Reader { return &decoder{r: r} }

type decoder struct {
	err     error
	readErr error
	r       io.Reader
	buf		[bufSize]byte
	outbuf  [bufSize*2]byte
	out     []byte
}

func (d *decoder) Read(p []byte) (n int, err error) {
	if len(p) == 0 {
		return 0, nil
	}
	if d.err != nil {
		return 0, d.err
	}

	n = 0
	nn := 0
	for {
		nn, d.readErr = d.r.Read(d.buf[:bufSize])
		if nn == 0 {
			copy(p, d.out)
			return n, nil
		}
		nn, _, err := Decode(d.outbuf[0:], d.buf[:nn])
		n += nn
		if err != nil {
			return n, err
		}
		d.out = append(d.out, d.outbuf[:nn]...)
	}
}